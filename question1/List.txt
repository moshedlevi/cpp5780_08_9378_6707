/*
   File: List.cpp
   Description: this is file contains implementation of class List with sub-class Node
   Course: 150018 C++ Workshop
   Exercise 6, Question 1
   Authors: David Ovits 311179378, Moshe David Levi 200436707
*/

#pragma warning (disable:4996)
#include "List.h"
#include "mytypes.h"

//------------------------------------------------
// class Node implementation
//------------------------------------------------
List::Node::Node(int val, List::Node* nxt) : _value(val), _next(nxt) {}
List::Node::Node(const List::Node& src) : _value(src._value), _next(src._next) {}

List::Node::~Node()
{
    next(nullptr);
}

int         List::Node::value() const { return _value; }
List::Node* List::Node::next() const { return _next; }
void        List::Node::next(Node* nxt) { _next = nxt; }

//--------------------------------------------
// class List implementation
//--------------------------------------------

// default constructor
List::List() : head(nullptr) {}

// copy constructor
List::List(const List& other) {
    Node* src, * trg;

    // other list is empty
    if (other.head == nullptr)
        head = nullptr;

    // other list isn't empty
    else {
        // create head node
        head = new Node(other.head->value(), nullptr);
        if (head == nullptr)
            throw "failed in memory allocation";

        src = other.head;
        trg = head;
        // loop copy all nodes
        while (src->next() != nullptr) {
            trg->next(new Node(src->next()->value(), nullptr));
            if (trg->next() == nullptr)
                throw "failed in memory allocation";
            src = src->next();
            trg = trg->next();
        }
    }
}

// move constructor
List::List(List&& other) {
    // Keep the temp list is permanent
    head = other.head;
    // Avoid destructing it in the temporary object
    other.head = nullptr;
}

// destructor
List::~List() {
    clear();
}

// clear all nodes in list
void List::clear() {
    // empty all elements from the List
    Node* next;
    for (Node* p = head; p != nullptr; p = next) {
        // delete the element pointed to by p
        next = p->next();
        p->next(nullptr);
        delete p;
    }
    // mark that the List contains no elements 
    head = nullptr;
}

// get bool if list is empty
bool List::isEmpty() const {
    // test to see if the List is empty
    // List is empty if the head pointer is null
    return head == nullptr;
}

void List::add(int val) {
    //Add a new value to the front of a Nodeed List
    head = new Node(val, head);
    if (head == nullptr)
        throw "failed in memory allocation";
}

// get value of head
int List::firstElement() const {
    // return first value in List
    if (isEmpty())
        throw "the List is empty, no first Element";
    return head->value();
}

// search in list by value
bool List::search(const int& val) const {
    // loop to test each element
    for (Node* p = head; p != nullptr; p = p->next())
        if (val == p->value())
            return true;
    // not found
    return false;
}

// insert value by order in list
void List::insert(const int val) {
    Node* p = new Node(val, nullptr);

    if (isEmpty()) {
        head = p;
        return;
    }

    if (head->value() > val){
        p->next(head);
        head = p;
        return;
    }

    Node* src = head;

    while ((src->next() != nullptr) && (src->next()->value() < val)) {
        src = src->next();
    }

    p->next(src->next());
    src->next(p);

    return;
}

// remove node by value
void List::remove(const int val) {
    
    // if the list is empty, can't remove
    if (isEmpty())
        throw "value not found";
    
    Node* p, * delNode;

    // if the value in head, moving the head to next
    if (head->value() == val) {
        p = head;
        head = head->next();
        p->next(nullptr);
        delete p;
        return;
    }

    p = head;

    // loop to check if next isn't and not the value to remove
    while ((p->next() != nullptr) && (p->next()->value() != val))
        p = p->next();
    
    // if end of list, can't remove
    if (p->next() == nullptr)
        throw "value not found";

    // if the value to remove, move the nextptr to next
    delNode = p->next();
    p->next(delNode->next());
    delNode->next(nullptr);
    delete delNode;

    return;
}

// remove first item in list
void List::removeFirst() {
    // make sure there is a first element
    if (isEmpty())
        throw "the List is empty, no Elements to remove";

    // save pointer to the removed node
    Node* p = head;
    // reassign the first node
    head = p->next();
    p->next(nullptr);
    // recover memory used by the first element
    delete p;
}

// operator = copy assignment
List& List::operator = (const List& other) {

    if (this == &other)
        return *this;

    Node* src, * trg;

    // if other is null, set null to head
    if (other.head == nullptr)
        head = nullptr;

    else {
        // copy head
        head = new Node(other.head->value(), nullptr);
        if (head == nullptr)
            throw "failed in memory allocation";

        src = other.head;
        trg = head;

        // loop to copy until end of list
        while (src->next() != nullptr) {
            trg->next(new Node(src->next()->value(), nullptr));
            if (trg->next() == nullptr)
                throw "failed in memory allocation";
            src = src->next();
            trg = trg->next();
        }
    }

    return *this;
}

// operator = move assignment
List& List::operator = (List&& other) {

    // Keep the temp list is permanent
    head = other.head;

    // Avoid destructing it in the temporary object
    other.head = nullptr;

    return *this;
}

// extraction operator
std::ostream& operator<<(std::ostream& out, const List& rhs)
{
    if (rhs.isEmpty())
        return out;

    // loop for cout all items to end of list
    for (List::Node* p = rhs.head; p != nullptr; p = p->next())
        out << p->value() << (p->next() != nullptr ? ", " : "");
       
    return out;
}

// insertion operator
std::istream& operator>>(std::istream& in, List& rhs)
{
    int val, last;
    in >> val;

    // loop for insert while new value is larger than previous
    do {
        last = val;
        rhs.insert(val);
        in >> val;
    } while (val > last);

    return in;
}

// merge 2 list to new one
List& merge(const List& lst1,const List& lst2)
{
    List* newList = new List;
    List::Node* n1, * n2;
    n1 = lst1.head;
    n2 = lst2.head;

    // loop while any of list isn't end
    while ((n1 != nullptr) || (n2 != nullptr)) {

        // if end of lst1 or value of lst1 grather than lst2, insert from lst2
        if ((n1 == nullptr) || ((n2 != nullptr) && (n1->value() > n2->value()))) {
            newList->insert(n2->value());
            n2 = n2->next();
        }
        // if end of lst2 or value of lst1 smaller than lst2, insert from lst1
        else {
            newList->insert(n1->value());
            n1 = n1->next();
        }
    }

    return *newList;
}

// search if there is double value, remove one
List& makeSet(List& lst)
{
    List::Node * p, *delNode;

    p = lst.head;

    // loop to the end
    while (p != nullptr) {
        // if next isn't null, and current value equal to next, remove
        if ((p->next() != nullptr) && (p->value() == p->next()->value())) {
            delNode = p->next();
            p->next(p->next()->next());
            delNode->next(nullptr);
            delete delNode;
        }

        p = p->next();
    }

    return lst;
}
